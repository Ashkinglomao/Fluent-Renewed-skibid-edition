getgenv().print = function() end
getgenv().warn = function() end
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local lobbyPlaceId = 14916516914

local function AttemptRejoin(retryCount)
    retryCount = retryCount or 0
    if retryCount < 5 then
        print("Rejoining attempt:", retryCount + 1)
        task.wait(5)
        local success, errorMessage = pcall(function()
            TeleportService:Teleport(lobbyPlaceId, Players.LocalPlayer) 
        end)
        if not success then
            print("Rejoin failed:", errorMessage)
            AttemptRejoin(retryCount + 1)
        end
    else
        print("")
    end
end

repeat task.wait() until CoreGui:FindFirstChild("RobloxPromptGui")

local promptOverlay = CoreGui.RobloxPromptGui:FindFirstChild("promptOverlay")
if promptOverlay then
    promptOverlay.ChildAdded:Connect(function(child)
        if child.Name == "ErrorPrompt" then
            print("")
            AttemptRejoin(1)
        end
    end)
end

if game.PlaceId == 14916516914 then

    while not game:IsLoaded() do
        wait(1)
    end
    wait(2)

    local playerScripts = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerScripts")
    if playerScripts then
        local BAKAMONKEY = playerScripts:FindFirstChild("Baka")
        if BAKAMONKEY then
            BAKAMONKEY:Destroy()
        else
            print("")
        end
    else
        print("")
    end

    local replicatedStorage = game:GetService("ReplicatedStorage")
    local workspaceService = game:GetService("Workspace")
    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

    local Window = Fluent:CreateWindow({
        Title = "Nexus Hub AoT:R",
        SubTitle = "by Ash",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = true, 
        Theme = "Darker",
        MinimizeKey = Enum.KeyCode.LeftControl 
    })
    
    local Tabs = {
        Main = Window:AddTab({ Title = "Main", Icon = "" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
    }

    InterfaceManager:SetFolder("NexusHub")
    SaveManager:SetFolder("NexusHub/settingsforautoload")

    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)

    Window:SelectTab(1)

    local selectedModifiers = {}

    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Mission Modifiers",
        Description = "Select multiple modifiers.",
        Values = {
            "Nightmare", "Oddball",
            "Injury Prone", "Chronic Injuries", "Fog", "Glass Cannon", "Time Trial", "Simple", "Boring", "No Skills", "No Perks","No Talents"        },
        Multi = true,
        Default = {"Fog"},
        Callback = function(value)
            selectedModifiers = value or {} 
            print("User selected modifiers:", selectedModifiers)
        end
    })

local RaidDropdown = Tabs.Main:AddDropdown("MultiDropdownforRaids", {
    Title = "Raid selections",
    Description = "Select",
    Values = {
        "Trost", "Shiganshina", "Stohess" 
    },
    Multi = false,
    Default = "", 
    Callback = function(value)
        if value then
            print("selected:", value) 
        end
    end
})
    
    local DifficultyDropdown = Tabs.Main:AddDropdown("DifficultyDropdown", {
        Title = "Difficulty",
        Description = "Select a difficulty level.",
        Values = { "Easy", "Normal", "Hard", "Severe", "Aberrant" },
        Multi = false,
        Default = "Easy",
    })

       local MissionDropdown = Tabs.Main:AddDropdown("MissionDropdown", {
        Title = "Map",
        Description = "Select a difficulty level.",
        Values = { "Shiganshina", "Utgard", "Stohess", "Giant Forest", "Outskirts", "Trost", "Loading Docks" },
        Multi = false,
        Default = "Shiganshina",
    })

    local Toggle = Tabs.Main:AddToggle("AutoUpgrade", {
        Title = "AutoUPGRADE",
        Description = "Automatically upgrades equipment.",
        Default = false,
        Callback = function(state)
            if state then
                print("Auto Upgrade Enabled!")
                local upgrades = {
                    "ODM_Damage", "ODM_Gas", "ODM_Range", "ODM_Speed",
                    "Blade_Durability", "Crit_Chance", "Crit_Damage", "ODM_Control"
                }

                for _, upgrade in ipairs(upgrades) do
                    game:GetService("ReplicatedStorage"):WaitForChild("Assets")
                        :WaitForChild("Remotes"):WaitForChild("GET")
                        :InvokeServer("S_Equipment", "Upgrade", upgrade)
                    task.wait(0.3)
                end

                print("All upgrades processed.")
            else
                print("Auto Upgrade Disabled.")
            end
        end
    })

    local Toggle = Tabs.Main:AddToggle("AutoStart", {
        Title = "Auto Mission",
        Default = false,
        Callback = function(enabled)
            if enabled then
                print("")
                task.wait(5)
                print("cREATE")
                local missionArgsstart = {
                    "S_Missions",
                    "Create",
                    {
                        Difficulty = DifficultyDropdown.Value,
                        Type = "Missions", 
                        Name = MissionDropdown.Value,
                        Objective = "Skirmish"
                    }
                }
                
                task.wait(0.2)
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(missionArgsstart))
                
                if selectedModifiers and typeof(selectedModifiers) == "table" then
                    for modifier, enabled in pairs(selectedModifiers) do
                        if enabled then
                            print("Applying Modifier:", modifier)
                            local args = { "S_Missions", "Modify", modifier }
                            game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))
                            task.wait(0.25)
                        end
                    end
                else
                    warn("No modifiers selected!")
                end
                
                task.wait(0.2)
                local startArgs = { "S_Missions", "Start" }
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(startArgs))

                print("")
            else
                print("")
            end
        end
    })
                local raidArgs = {
                    "S_Missions",
                    "Create",
                    {
                        Difficulty = DifficultyDropdown.Value, 
                        Name = "Shiganshina",
                        Objective = "Skirmish"
                    }
                }
                
                task.wait(0.2)
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(raidArgs))
    local Toggle = Tabs.Main:AddToggle("AutoStartraid", {
        Title = "Auto Raid",
        Default = false,
        Callback = function(enabled)
            if enabled then
                print("")
                task.wait(5)
                
            print("attempting poop")
            local missionArgs = {
	          "S_Missions",
	             "Create",
	        {
		   Difficulty = DifficultyDropdown.Value,
		   Type = "Raids",
		   Name = RaidDropdown.Value,
		   Objective = "Skirmish"
	        }
      }
             game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(missionArgs))                    
                    
                    
                task.wait(0.2)
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(missionArgs))
                
                if selectedModifiers and typeof(selectedModifiers) == "table" then
                    for modifier, enabled in pairs(selectedModifiers) do
                        if enabled then
                            print("Applying Modifier:", modifier)
                            local args = { "S_Missions", "Modify", modifier }
                            game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))
                            task.wait(0.25)
                        end
                    end
                else
                    warn("No modifiers selected!")
                end
                
                task.wait(0.2)
                local startArgs = { "S_Missions", "Start" }
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(startArgs))

                print("")
            else
                print("")
            end
        end
    })
SaveManager:LoadAutoloadConfig()
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function checkPlayers()
    while true do
        local playerCount = #Players:GetPlayers()

        if playerCount >= 2 then

            local args = {
                "Functions",
                "Teleport"
            }
            ReplicatedStorage:WaitForChild("Assets")
                :WaitForChild("Remotes"):WaitForChild("POST")
                :FireServer(unpack(args))
        else
            print("Waiting for more players... Current count:", playerCount)
        end
        
        task.wait(2) 
    end
end

task.spawn(checkPlayers)
