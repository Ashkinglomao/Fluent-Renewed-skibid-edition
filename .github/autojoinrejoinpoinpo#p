local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local lobbyPlaceId = 14916516914

local function AttemptRejoin(retryCount)
    retryCount = retryCount or 0
    if retryCount < 5 then
        print("Rejoining attempt:", retryCount + 1)
        task.wait(5)
        local success, errorMessage = pcall(function()
            TeleportService:Teleport(lobbyPlaceId, Players.LocalPlayer) 
        end)
        if not success then
            print("Rejoin failed:", errorMessage)
            AttemptRejoin(retryCount + 1)
        end
    else
        print("")
    end
end

repeat task.wait() until CoreGui:FindFirstChild("RobloxPromptGui")

local promptOverlay = CoreGui.RobloxPromptGui:FindFirstChild("promptOverlay")
if promptOverlay then
    promptOverlay.ChildAdded:Connect(function(child)
        if child.Name == "ErrorPrompt" then
            print("")
            AttemptRejoin(1)
        end
    end)
end

if game.PlaceId == 14916516914 then


while not game:IsLoaded() do
    wait(1)
end
wait(2)


local playerScripts = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerScripts")
if playerScripts then
    local BAKAMONKEY = playerScripts:FindFirstChild("Baka")
    if BAKAMONKEY then
        BAKAMONKEY:Destroy()
    else
        print("")
    end
else
    print("")
end

local replicatedStorage = game:GetService("ReplicatedStorage")
local workspaceService = game:GetService("Workspace")
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Nexus Hub AoT:R",
    SubTitle = "by Ash",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, 
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl 
})
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
}


InterfaceManager:SetFolder("NexusHub")
SaveManager:SetFolder("NexusHub/settingsforautoload")

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

local selectedModifiers = {}

local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
    Title = "Mission Modifiers",
    Description = "Select multiple modifiers.",
    Values = {
        "Nightmare", "Oddball",
        "Injury Prone", "Chronic Injuries", "Fog", "Glass Cannon", "Time Trial"
    },
    Multi = true,
    Default = {"Fog"},
    Callback = function(value)
        selectedModifiers = value or {} -- Make sure it's always safe
        print("User selected modifiers:", selectedModifiers)
    end
})


local DifficultyDropdown = Tabs.Main:AddDropdown("DifficultyDropdown", {
    Title = "Mission Difficulty",
    Description = "Select a difficulty level.",
    Values = { "Easy", "Normal", "Hard", "Severe", "Aberrant" },
    Multi = false,
    Default = "Easy",
})

local Toggle = Tabs.Main:AddToggle("AutoStart", {
    Title = "Auto Mission",
    Default = false,
    Callback = function(enabled)
        if enabled then
            print("")
            task.wait(5)
            
            -- Mission setup (Create the mission first)
            local missionArgs = {
                "S_Missions",
                "Create",
                {
                    Difficulty = DifficultyDropdown.Value, -- Directly use dropdown value
                    Type = "Missions",
                    Name = "Shiganshina",
                    Objective = "Skirmish"
                }
            }
            
            -- Wait a bit to ensure the mission is set up before applying modifiers
            task.wait(0.2)
            game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(missionArgs))
            
            -- Apply all selected modifiers
if selectedModifiers and typeof(selectedModifiers) == "table" then
    for modifier, enabled in pairs(selectedModifiers) do
        if enabled then
            print("Applying Modifier:", modifier)
            local args = { "S_Missions", "Modify", modifier }
            game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))
            task.wait(0.25)
        end
    end
else
    warn("No modifiers selected!")
end


            
            -- Start the mission AFTER applying modifiers
            task.wait(0.2)
            local startArgs = { "S_Missions", "Start" }
            game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(startArgs))

            print("")
        else
            print("")
        end
    end
})
