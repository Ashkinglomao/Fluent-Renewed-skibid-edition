while not game:IsLoaded() do
    task.wait(0.1)
end

getgenv().print = function() end
getgenv().warn = function() end
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspaceService = game:GetService("Workspace")
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local TeleportService = game:GetService("TeleportService")
local http = game:GetService("HttpService");
local VIM = game:GetService("VirtualInputManager");
local Players = game:GetService("Players");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local LocalPlayer = Players.LocalPlayer;
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

if game.PlaceId == 14916516914 then
Fluent:Notify({
        Title = "Not Supported In Lobby for now",
        Content = "Please execute in a mission or raid",
        SubContent = "Thank you", 
        Duration = 5 
})


else 

local replicatedStorage = game:GetService("ReplicatedStorage")
local objectives = replicatedStorage:WaitForChild("Objectives")

local slay = objectives:FindFirstChild("Stall_Time")
if slay then
    
    while not slay:GetAttribute("Requirement") do
        task.wait(0.1)
    end

  
    local waitForTitansNumber = slay:GetAttribute("Requirement")
    local workspaceService = game:GetService("Workspace")
    local titansFolder = workspaceService:WaitForChild("Titans")


    print("Slay objective condition met!")

else

    local defendEren = objectives:FindFirstChild("Defend_Eren")
    if defendEren then
        print("Slay isn't present, but Defend_Eren exists.")
    else
        warn("Neither Slay nor Defend_Eren exist.")
    end

end

	local Stall_Time  = game:GetService("ReplicatedStorage").Objectives.Stall_Time
	local Requirementforstall = Stall_Time:GetAttribute("Requirement")
	local Valueforstall = 

print("Objective requirement detected!")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local workspace = game:GetService("Workspace")
local cf = workspace:WaitForChild("Characters")
local cfc = cf:WaitForChild(player.Name)
local rigChildName = "Rig_" .. player.Name
local rigChild = cfc:WaitForChild(rigChildName)
	local Window = Fluent:CreateWindow({
    Title = "Nexus Hub AoT:R",
    SubTitle = "by Ash",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, 
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl 
})
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Extras = Window:AddTab({ Title = "Extras", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    Discord = Window:AddTab({ Title = "Discord", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
}

Tabs.Discord:AddParagraph({
    Title = "Discord Invite",
    Content = "https://discord.gg/3GaHgcGGhv"
})
Tabs.Discord:AddButton({
    Title = "Copy Discord Invite",
    Description = "Copy Discord Invite",
    Callback = function()
   setclipboard("https://discord.gg/3GaHgcGGhv")
    end
})


InterfaceManager:SetFolder("NexusHub")
SaveManager:SetFolder("NexusHub")

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)


local function AutoAttackRaid_GetRemainingAmmo()
    local player = game:GetService("Players").LocalPlayer

    -- Wait for the character to load
    local character
    repeat
        character = player.Character or player.CharacterAdded:Wait()
        task.wait(0.1)
    until character

    -- Wait for the rig and spear containers to exist
    local rig, rightContainer, leftContainer
    repeat
        rig = character:FindFirstChild("Rig_" .. player.Name)
        rightContainer = rig and rig:FindFirstChild("RightLowerArm") and rig.RightLowerArm:FindFirstChild("Spears")
        leftContainer  = rig and rig:FindFirstChild("LeftLowerArm") and rig.LeftLowerArm:FindFirstChild("Spears")
        task.wait(0.1)
    until rig and rightContainer and leftContainer

    -- Calculate total ammo
    local totalAmmo = #rightContainer:GetChildren() + #leftContainer:GetChildren()

    -- Count used spears
    local usedCount = 0
    for _, spear in ipairs(rightContainer:GetChildren()) do
        if spear:GetAttribute("Used") then
            usedCount = usedCount + 1
        end
    end
    for _, spear in ipairs(leftContainer:GetChildren()) do
        if spear:GetAttribute("Used") then
            usedCount = usedCount + 1
        end
    end

    -- Determine the next spear to fire
    local nextShotIndex = usedCount + 1
    local chosenContainer = (nextShotIndex % 2 == 1) and rightContainer or leftContainer

    -- Sort spears by name
    local spearsArray = {}
    for _, spear in ipairs(chosenContainer:GetChildren()) do
        table.insert(spearsArray, spear)
    end
    table.sort(spearsArray, function(a, b)
        return tonumber(a.Name) < tonumber(b.Name)
    end)

    -- Find next available spear
    local spearToFire = nil
    for _, spear in ipairs(spearsArray) do
        if not spear:GetAttribute("Used") then
            spearToFire = tonumber(spear.Name)
            break
        end
    end

    -- Fallback to alternate container if no available spear was found
    if not spearToFire then
        local altContainer = (chosenContainer == rightContainer) and leftContainer or rightContainer
        local altSpearsArray = {}
        for _, spear in ipairs(altContainer:GetChildren()) do
            table.insert(altSpearsArray, spear)
        end
        table.sort(altSpearsArray, function(a, b)
            return tonumber(a.Name) < tonumber(b.Name)
        end)
        for _, spear in ipairs(altSpearsArray) do
            if not spear:GetAttribute("Used") then
                spearToFire = tonumber(spear.Name)
                break
            end
        end
    end

    return spearToFire, totalAmmo
end

local function WaitForSlayThenAdd()
    local Slay = ReplicatedStorage.Objectives:WaitForChild("Stall_Time")
    local requirement = Slay:GetAttribute("Requirement")
    print("[WaitForSlayThenAdd] Waiting for Slay objective to reach requirement:", requirement)
    
    while Slay.Value ~= requirement do
        task.wait(0.1)
    end

    local args = {
        "Functions",
        "Retry",
        "Add"
    }
    ReplicatedStorage
        :WaitForChild("Assets")
        :WaitForChild("Remotes")
        :WaitForChild("GET")
        :InvokeServer(unpack(args))
        
    print("[WaitForSlayThenAdd] Slay objective met; GET remote fired with:", unpack(args))
	onMissionComplete()
end

function sendMessage(title, description, items)
    local itemString = table.concat(items, "\n")
    local data = {
        content = "",
        embeds = {{
            title = title,
            description = (description .. "\n" .. itemString),
            color = 4286945 
        }}
    }
    local actual = http:JSONEncode(data)

    local success, response = pcall(function()
        request({
            Url = Webhook,
            Method = "POST",
            Body = actual,
            Headers = {
                ["content-Type"] = "application/json"
            }
        })
    end)
end


local Togglespearrefill = Tabs.Main:AddToggle("Spear Refill", 
{
    Title = "Auto Spear Refill", 
    Description = "Auto refill your spears",
    Default = false,
    Callback = function(state)
        if state then
            local function checkAndRefillSpear()
                local whentofirespearrefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears.Text
                if string.find(whentofirespearrefill, "0") and not spearHasFired then

                    local args = {
                        [1] = "Spears",
                        [2] = "Full_Reload",
                        [3] = "Left",
                        [4] = workspace:WaitForChild("Unclimbable"):WaitForChild("Reloads"):WaitForChild("GasTanks"):WaitForChild("Refill")
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args))
                    
                    spearHasFired = true
                end
            end

            local spearConnection
            spearConnection = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears:GetPropertyChangedSignal("Text"):Connect(function()
                local whentofirespearrefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears.Text
                   if string.find(whentofirespearrefill, "0") then

                    checkAndRefillSpear()
                else
                    spearHasFired = false 
                end
            end)

            checkAndRefillSpear()
        end 
    end 
})

local Togglebladerefill = Tabs.Main:AddToggle("Blade Refill", 
{
    Title = "Auto Blade Refill", 
    Description = "Auto refill your blades",
    Default = false,
    Callback = function(state)
        if state then
            local function checkAndRefillBlade()
                local whentofirebladerefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Blades.Sets.Text
                if whentofirebladerefill == "0 / 3" and checkBladesTransparent() and not bladeHasFired then
        
                   local args = {
                        [1] = "Blades",
                        [2] = "Full_Reload",
                        [3] = "Left",
                        [4] = workspace:WaitForChild("Unclimbable"):WaitForChild("Reloads"):WaitForChild("GasTanks"):WaitForChild("Refill")
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args))
                    
                    bladeHasFired = true
                end
            end

            local bladeConnection
            bladeConnection = game:GetService("RunService").Stepped:Connect(function()
                if not bladeHasFired then
                    checkAndRefillBlade()
                end
            end)

            local textConnection
            textConnection = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Blades.Sets:GetPropertyChangedSignal("Text"):Connect(function()
                local whentofirebladerefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Blades.Sets.Text
                if whentofirebladerefill ~= "0 / 3" then
                    bladeHasFired = false 
                end
            end)

            checkAndRefillBlade()
        end 
    end 
})

local MissionWait = 0.1 -- seconds delay before starting the actual autofarm

local Toggleopfarm = Tabs.Main:AddToggle("OP Autofarm", {
    Title = "OP Autofarm",
    Description = "Turn on the OP Autofarm",
    Default = false,
    Callback = function(OPAUTOFARM)
        local runService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local workspace = game:GetService("Workspace")
        local VIP = game:GetService("VirtualInputManager")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")

        local autofarmActive = false
        local retryCompleted = false

        local function cleanup()
            if getgenv().stopAutofarm then
                getgenv().stopAutofarm()
            end
        end

        local function waitForGameReady()
            repeat task.wait() until ReplicatedStorage:FindFirstChild("Objectives") and ReplicatedStorage:FindFirstChild("Assets")
            local Stall = ReplicatedStorage.Objectives:FindFirstChild("Stall_Time")
            repeat task.wait() until (Stall and Stall:GetAttribute("Requirement"))
        end

        if OPAUTOFARM then
            waitForGameReady()

            local bodyPosition = Instance.new("BodyPosition", rootPart)
            bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            bodyPosition.D = 500
            bodyPosition.P = 5000

            local bodyGyro = Instance.new("BodyGyro", rootPart)
            bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
            bodyGyro.P = 2500

            local startPos = rootPart.Position + Vector3.new(0, 500, 0)
            bodyPosition.Position = startPos

            runService.RenderStepped:Connect(function()
                bodyPosition.Position = startPos
                bodyGyro.CFrame = rootPart.CFrame
            end)

            autofarmActive = true
            retryCompleted = false

            local function moveNapes()
                for _, titan in ipairs(workspace.Titans:GetChildren()) do
                    local Hitboxes = titan:FindFirstChild("Hitboxes")
                    local Hit = Hitboxes and Hitboxes:FindFirstChild("Hit")
                    local Nape = Hit and Hit:FindFirstChild("Nape")
                    if Nape then
                        Nape.Size = Vector3.new(250, 250, 250)
                        Nape.Position = rootPart.Position + rootPart.CFrame.LookVector * 5
                        Nape.Anchored = true
                    end
                end
            end

            local function fireSkillWhenReady(skillName, keyCode)
                while autofarmActive and not retryCompleted do
                    local skill = player.PlayerGui.Interface.HUD.Main.Top.Hotbar:FindFirstChild(skillName)
                    local cooldown = skill and skill:FindFirstChild("Cooldown")
                    if cooldown and not cooldown.Visible then
                        pcall(function()
                            VIP:SendKeyEvent(true, keyCode, false, game)
                        end)
                        task.wait(0.5)
                    end
                    task.wait(0.5)
                end
            end

            local function autofarm()
                task.wait(MissionWait)

                moveNapes()
                VIP:SendKeyEvent(true, Enum.KeyCode.One, false, game)
                task.wait(0.1)
                VIP:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
                task.wait(0.5)

                spawn(function()
                    while autofarmActive and not retryCompleted do
                        moveNapes()
                        task.wait(0.9)
                    end
                end)

                spawn(function() fireSkillWhenReady("Skill_1", Enum.KeyCode.One) end)
                spawn(function() fireSkillWhenReady("Skill_2", Enum.KeyCode.Two) end)

                local Slay = ReplicatedStorage.Objectives:WaitForChild("Stall_Time")
                local requirement = Slay:GetAttribute("Requirement")
                while Slay.Value ~= requirement and autofarmActive do
                    task.wait(0.5)
                end

                local args = { "Functions", "Retry", "Add" }
                ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))
                onMissionComplete()
                retryCompleted = true
            end

            coroutine.wrap(autofarm)()

            getgenv().stopAutofarm = function()
                autofarmActive = false
                retryCompleted = false
            end
        else
            cleanup()
        end
    end
})


local function MissionFarm_Run()
    task.wait(0.1) 

    while toggleState do
        local titansFolder = Workspace:FindFirstChild("Titans")
        if titansFolder then
            local targetNapes = {}

            for _, titan in ipairs(titansFolder:GetChildren()) do
                if not titan:FindFirstChild("Dead") then
                    local hitboxes = titan:FindFirstChild("Hitboxes")
                    local hit = hitboxes and hitboxes:FindFirstChild("Hit")
                    local nape = hit and hit:FindFirstChild("Nape")
                    
                    if nape and nape:IsA("BasePart") then
                        table.insert(targetNapes, nape.Position)
                    end
                end
            end

            if #targetNapes > 0 then
                local ammo = AutoAttackRaid_GetRemainingAmmo()
                if ammo > 0 then
                    ReplicatedStorage.Assets.Remotes.GET:InvokeServer("Spears", "S_Fire", tostring(ammo))
                    print("[MissionFarm] Fired spear. Ammo left:", ammo)
                    task.wait(0.1)

                    for _, pos in ipairs(targetNapes) do
                        ReplicatedStorage.Assets.Remotes.POST:FireServer("Spears", "S_Explode", pos, 0.11289310455322266, 777.47021484375)
                    end

                    print("[MissionFarm] Exploded at", #targetNapes, "napes.")
                else
                    print("[MissionFarm] No ammo!")
                end
            else
                print("[MissionFarm] No living titans found.")
            end
        end

        task.wait(1) 
    end
end


local Toggle = Tabs.Main:AddToggle("SpearMissionFarmToggle", {
    Title = "Spear Mission Farm",
    Description = ".",
    Default = false,
    Callback = function(state)
        toggleState = state
        if state then
            print("[Toggle] Mission farm activated!")

            
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local rootPart = character:WaitForChild("HumanoidRootPart")
            local targetPos = rootPart.Position + Vector3.new(0, 500, 0)

            local bodyPosition = Instance.new("BodyPosition")
            bodyPosition.Parent = rootPart
            bodyPosition.Position = targetPos
            bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            bodyPosition.D = 50
            bodyPosition.P = 50

            local bodyGyro = Instance.new("BodyGyro")
            bodyGyro.Parent = rootPart
            bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
            bodyGyro.P = 50

            print(string.format("[Toggle] Hovering player to (%.2f, %.2f, %.2f)", targetPos.X, targetPos.Y, targetPos.Z))


            task.spawn(MissionFarm_Run)
            task.spawn(WaitForSlayThenAdd)
        else
            print("[Toggle] Mission farm deactivated.")
        end
    end
})
end







SaveManager:LoadAutoloadConfig()
