
while not game:IsLoaded() do
    wait(0.1)
end
getgenv().warn = function() end
getgenv().print = function() end
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspaceService = game:GetService("Workspace")
local Fluent = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local TeleportService = game:GetService("TeleportService")
local http = game:GetService("HttpService");
local VIM = game:GetService("VirtualInputManager");
local Players = game:GetService("Players");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local LocalPlayer = Players.LocalPlayer;
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

if game.PlaceId == 14916516914 then
Fluent:Notify({
        Title = "Not Supported In Lobby for now",
        Content = "Please execute in a mission or raid",
        SubContent = "Thank you", 
        Duration = 5 
})


else 

local replicatedStorage = game:GetService("ReplicatedStorage")
local objectives = replicatedStorage:WaitForChild("Objectives")

local slay = objectives:FindFirstChild("Slay")
if slay then
    
    while not slay:GetAttribute("Requirement") do
        task.wait(0.1)
    end

  
    local waitForTitansNumber = slay:GetAttribute("Requirement")
    local workspaceService = game:GetService("Workspace")
    local titansFolder = workspaceService:WaitForChild("Titans")

 
    if slay.Value == 0 then
        while #titansFolder:GetChildren() < waitForTitansNumber do
            task.wait(0.1)
        end
    end

    print("Slay is now rady for retry lmao")

else

    local defendEren = objectives:FindFirstChild("Defend_Eren")
    if defendEren then
        print("defend eren found")
    else
        warn("well i guess the game is aying fujc you")
    end
end

print("yep yp 1 titan for every requirment")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
wait(0.1)
local workspace = game:GetService("Workspace")
local cf = workspace:WaitForChild("Characters")
local cfc = cf:WaitForChild(player.Name)
local rigChildName = "Rig_" .. player.Name
local rigChild = cfc:WaitForChild(rigChildName)
wait(0.1)
	local Window = Fluent:CreateWindow({
    Title = "Nexus Hub AoT:R",
    SubTitle = "by Ash",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, 
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl 
})
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Extras = Window:AddTab({ Title = "Extras", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    Stockpile = Window:AddTab({ Title = "Stockpile", Icon = "" }),
    Discord = Window:AddTab({ Title = "Discord", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
}



if BAKAMONKEY then
    BAKAMONKEY:Destroy()
else
    print("BAKAMONKEY does not exist uog oh my")
end

InterfaceManager:SetFolder("NexusHub")
SaveManager:SetFolder("NexusHub/settings")

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local placeId = 14916516914 
local missionFile = "mission_count.txt"


local Toggle = Tabs.Misc:CreateToggle("MissionRejoinTRACKER", 
{
    Title = "Rejoin15Missions", 
    Description = "Enable/Disable mission tracking",
    Default = false,
    Callback = function(state)
        missionEnabled = state
        if missionEnabled then
            print("Mission tracking enabled")
        else
            print("Mission tracking disabled")
        end
    end 
})

local function getMissionCount()
    local success, result = pcall(function()
        return tonumber(readfile(missionFile)) or 0
    end)
    return success and result or 0
end

local function setMissionCount(count)
    pcall(function()
        writefile(missionFile, tostring(count))
    end)
end

local function teleportToLobby()
    print("15 missions done yipee now go goon!")
    
    setMissionCount(0)
print(" ok now my mga ass set it to 0")
    task.wait(0.3)
    
local args = {
	"Functions",
	"Teleport"
}
game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args))

end

local function onMissionComplete()
    if missionEnabled then
        local missionCount = getMissionCount()
        missionCount = missionCount + 1
        setMissionCount(missionCount)
        print("fuck u")

        if missionCount >= 15 then
            print("so bassicay it doe but u not enable")
             teleportToLobby()
        end
    end
end

local function AutoAttackRaid_GetRemainingAmmo()
    local player = game:GetService("Players").LocalPlayer

    local character
    repeat
        character = player.Character or player.CharacterAdded:Wait()
        task.wait(0.1)
    until character

    local rig, rightContainer, leftContainer
    repeat
        rig = character:FindFirstChild("Rig_" .. player.Name)
        rightContainer = rig and rig:FindFirstChild("RightLowerArm") and rig.RightLowerArm:FindFirstChild("Spears")
        leftContainer  = rig and rig:FindFirstChild("LeftLowerArm") and rig.LeftLowerArm:FindFirstChild("Spears")
        task.wait(0.1)
    until rig and rightContainer and leftContainer

    local totalAmmo = #rightContainer:GetChildren() + #leftContainer:GetChildren()

    local usedCount = 0
    for _, spear in ipairs(rightContainer:GetChildren()) do
        if spear:GetAttribute("Used") then
            usedCount = usedCount + 1
        end
    end
    for _, spear in ipairs(leftContainer:GetChildren()) do
        if spear:GetAttribute("Used") then
            usedCount = usedCount + 1
        end
    end

    local nextShotIndex = usedCount + 1
    local chosenContainer = (nextShotIndex % 2 == 1) and rightContainer or leftContainer

    local spearsArray = {}
    for _, spear in ipairs(chosenContainer:GetChildren()) do
        table.insert(spearsArray, spear)
    end
    table.sort(spearsArray, function(a, b)
        return tonumber(a.Name) < tonumber(b.Name)
    end)

    local spearToFire = nil
    for _, spear in ipairs(spearsArray) do
        if not spear:GetAttribute("Used") then
            spearToFire = tonumber(spear.Name)
            break
        end
    end

    if not spearToFire then
        local altContainer = (chosenContainer == rightContainer) and leftContainer or rightContainer
        local altSpearsArray = {}
        for _, spear in ipairs(altContainer:GetChildren()) do
            table.insert(altSpearsArray, spear)
        end
        table.sort(altSpearsArray, function(a, b)
            return tonumber(a.Name) < tonumber(b.Name)
        end)
        for _, spear in ipairs(altSpearsArray) do
            if not spear:GetAttribute("Used") then
                spearToFire = tonumber(spear.Name)
                break
            end
        end
    end

    return spearToFire, totalAmmo
end


local function WaitForSlayThenAdd()
    local Slay = ReplicatedStorage.Objectives:WaitForChild("Slay")
    local requirement = Slay:GetAttribute("Requirement")
    print("wautubg")
    
    while toggleState and Slay.Value ~= requirement do
        task.wait(0.1)
    end
    if not toggleState then
        return
    end
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local args = {
        "Functions",
        "Retry",
        "Add"
    }
    ReplicatedStorage
        :WaitForChild("Assets")
        :WaitForChild("Remotes")
        :WaitForChild("GET")
        :InvokeServer(unpack(args))
        
    print("HI RJR", unpack(args))
	onMissionComplete()
end

local args = { "Data", "Copy" }
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local data = ReplicatedStorage
    :WaitForChild("Assets")
    :WaitForChild("Remotes")
    :WaitForChild("GET")
    :InvokeServer(unpack(args))

local function formatNestedTable(tbl)
    local content = ""
    for key, value in pairs(tbl) do
        if type(value) == "table" then
            content = content .. key .. ": (Table)\n"
            for subKey, subValue in pairs(value) do
                content = content .. "  " .. subKey .. ": " .. tostring(subValue) .. "\n"
            end
        else
            content = content .. key .. ": " .. tostring(value) .. "\n"
        end
    end
    return content
end

if data and data.Slots and data.Current_Slot then
    local slotData = data.Slots[data.Current_Slot]

    if not slotData then
        print("no slot data for your migger")
        return
    end

    -- Handle Currency
    if slotData.Currency and next(slotData.Currency) then
        for key, value in pairs(slotData.Currency) do
            Tabs.Stockpile:CreateParagraph("CurrencyParagraph", {
                Title = "Currency: " .. key,
                Content = "Amount: " .. tostring(value)
            })
        end
    else
        print("u broke as shit")
    end

    -- Handle Inventory
    if slotData.Inventory and next(slotData.Inventory) then
        for categoryName, categoryItems in pairs(slotData.Inventory) do
            local formattedContent = formatNestedTable(categoryItems) or "No items available."
            Tabs.Stockpile:CreateParagraph("InventoryParagraph", {
                Title = "Inventory: " .. categoryName,
                Content = formattedContent
            })
        end
    else
        print("no inv fir u :laughing")
    end
else
    print("idfk")
end



local function MissionFarm_Run()
    task.wait(25) -- Initial delay before execution

    while toggleState do
        local titansFolder = workspace:FindFirstChild("Titans")
        if titansFolder then
            local targetNapes = {}

            -- Loop through each titan and collect valid nape positions (using attribute "Dead")
            for _, titan in ipairs(titansFolder:GetChildren()) do
                if not titan:GetAttribute("Dead") then
                    local hitboxes = titan:FindFirstChild("Hitboxes")
                    local hit = hitboxes and hitboxes:FindFirstChild("Hit")
                    local nape = hit and hit:FindFirstChild("Nape")
                    if nape and nape:IsA("BasePart") then
                        table.insert(targetNapes, nape.Position)
                    end
                end
            end

            if #targetNapes > 0 then
                local nextSpear, totalAmmo = AutoAttackRaid_GetRemainingAmmo()
                if nextSpear then
                    ReplicatedStorage.Assets.Remotes.GET:InvokeServer("Spears", "S_Fire", tostring(nextSpear))
                    print("FIRED SPEAR BITCH")
                    task.wait(0.1)

                    for _, pos in ipairs(targetNapes) do
                        ReplicatedStorage.Assets.Remotes.POST:FireServer("Spears", "S_Explode", pos, 0.11289310455322266, 777.47021484375)
                    end
                    print("these napes")
                else
                    print("valid spear no found bitch")
                end
            else
                print("all titans dead lowkey")
            end
        end

        task.wait(1)
    end
end

local Toggle = Tabs.Main:CreateToggle("SpearMissionFarmToggle", {
    Title = "Spear Mission Farm",
    Description = ".",
    Default = false,
    Callback = function(state)
        toggleState = state
        if state then
            print("spear farm on 1F43BFEW")
               
local function disableCollisions()
    task.wait(0.1)

    local obstacleFolders = {"Climbable", "Points", "Unclimbable"}
    for _, folderName in ipairs(obstacleFolders) do
        local folder = workspace:FindFirstChild(folderName)
        if folder then
            for _, descendant in ipairs(folder:GetDescendants()) do
                if descendant:IsA("BasePart") then
                    descendant.CanCollide = false
                end
            end
        end
    end
end

disableCollisions()

            
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local rootPart = character:WaitForChild("HumanoidRootPart")
            local targetPos = rootPart.Position + Vector3.new(0, 500, 0)

            local bodyPosition = Instance.new("BodyPosition")
            bodyPosition.Parent = rootPart
            bodyPosition.Position = targetPos
            bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            bodyPosition.D = 50
            bodyPosition.P = 50

            local bodyGyro = Instance.new("BodyGyro")
            bodyGyro.Parent = rootPart
            bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
            bodyGyro.P = 50

            print(string.format(" hovering player to (%.2f, %.2f, %.2f)", targetPos.X, targetPos.Y, targetPos.Z))


            task.spawn(MissionFarm_Run)
            task.spawn(WaitForSlayThenAdd)
        else
            print("hi bro i am not poopy")
        end
    end
})


local MissionWait = 25

local runService = game:GetService("RunService")
local Players = game:GetService("Players")
local workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local VIP = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")


local MissionWait = 25 

local Toggleopfarm = Tabs.Main:CreateToggle("OP Autofarm", {
    Title = "OP Autofarm",
    Description = "Turn on the OP Autofarm",
    Default = false,
    Callback = function(OPAUTOFARM)
        local runService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local workspace = game:GetService("Workspace")
        local VIP = game:GetService("VirtualInputManager")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")

        local autofarmActive = false
        local retryCompleted = false

        local function cleanup()
            if getgenv().stopAutofarm then
                getgenv().stopAutofarm()
            end
        end

        if OPAUTOFARM then
            local bodyPosition = Instance.new("BodyPosition", rootPart)
            bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            bodyPosition.D = 500
            bodyPosition.P = 5000

            local bodyGyro = Instance.new("BodyGyro", rootPart)
            bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
            bodyGyro.P = 2500

            local startPos = rootPart.Position + Vector3.new(0, 500, 0)
            bodyPosition.Position = startPos

            runService.RenderStepped:Connect(function()
                bodyPosition.Position = startPos
                bodyGyro.CFrame = rootPart.CFrame
            end)

            autofarmActive = true
            retryCompleted = false

            local function moveNapes()
                for _, titan in ipairs(workspace.Titans:GetChildren()) do
                    local Hitboxes = titan:FindFirstChild("Hitboxes")
                    local Hit = Hitboxes and Hitboxes:FindFirstChild("Hit")
                    local Nape = Hit and Hit:FindFirstChild("Nape")
                    if Nape then
                        Nape.Size = Vector3.new(250, 250, 250)
                        Nape.Position = rootPart.Position + rootPart.CFrame.LookVector * 5
                        Nape.Anchored = true
                    end
                end
            end

            local function fireSkillWhenReady(skillName, keyCode)
                while autofarmActive and not retryCompleted do
                    local skill = player.PlayerGui.Interface.HUD.Main.Top.Hotbar:FindFirstChild(skillName)
                    local cooldown = skill and skill:FindFirstChild("Cooldown")
                    if cooldown and not cooldown.Visible then
                        VIP:SendKeyEvent(true, keyCode, false, game)
                        task.wait(0.5)
                    end
                    task.wait(0.5)
                end
            end

            local function autofarm()
                task.wait(MissionWait)

               
                moveNapes()
                VIP:SendKeyEvent(true, Enum.KeyCode.One, false, game)
                task.wait(0.1)
                VIP:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
                task.wait(0.5)

          
                spawn(function()
                    while autofarmActive and not retryCompleted do
                        moveNapes()
                        task.wait(0.9)
                    end
                end)

                spawn(function() fireSkillWhenReady("Skill_1", Enum.KeyCode.One) end)
                spawn(function() fireSkillWhenReady("Skill_2", Enum.KeyCode.Two) end)

               
                local Slay = ReplicatedStorage.Objectives:WaitForChild("Slay")
                local requirement = Slay:GetAttribute("Requirement")
                while Slay.Value ~= requirement and autofarmActive do
                    task.wait(0.5)
                end

                local args = { "Functions", "Retry", "Add" }
                ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))
                onMissionComplete()
                retryCompleted = true
            end

            coroutine.wrap(autofarm)()

            getgenv().stopAutofarm = function()
                autofarmActive = false
                retryCompleted = false
            end
        else
            cleanup()
        end
    end
})

function sendMessage(title, description, items)
    local itemString = table.concat(items, "\n")
    local data = {
        content = "",
        embeds = {{
            title = title,
            description = (description .. "\n" .. itemString),
            color = 4286945 
        }}
    }
    local actual = http:JSONEncode(data)

    local success, response = pcall(function()
        request({
            Url = Webhook,
            Method = "POST",
            Body = actual,
            Headers = {
                ["content-Type"] = "application/json"
            }
        })
    end)
end



local spearHasFired = false 
local bladeHasFired = false 

local player = game:GetService("Players").LocalPlayer
local character = workspace.Characters[player.Name]

if not character then
    warn("Character not found for player:", player.Name)
    return
end

local rig = character["Rig_" .. player.Name] 

if not rig then
    warn("Rig not found for player:", "Rig_" .. player.Name)
    return
end

local function checkBladesTransparent()
    local blades = {
        rig.LeftHand.Blade_1,
        rig.LeftHand.Blade_2,
        rig.LeftHand.Blade_3,
        rig.RightHand.Blade_1,
        rig.RightHand.Blade_2,
        rig.RightHand.Blade_3
    }

    for _, blade in pairs(blades) do
        if blade and blade.Transparency ~= 1 then
            return false
        end
    end
    return true
end

local Togglespearrefill = Tabs.Extras:CreateToggle("Spear Refill", 
{
    Title = "Auto Spear Refill", 
    Description = "Auto refill your spears",
    Default = false,
    Callback = function(state)
        if state then
            local function checkAndRefillSpear()
                local whentofirespearrefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears.Text
                if string.find(whentofirespearrefill, "0") and not spearHasFired then

                    local args = {
                        [1] = "Spears",
                        [2] = "Full_Reload",
                        [3] = "Left",
                        [4] = workspace:WaitForChild("Unclimbable"):WaitForChild("Reloads"):WaitForChild("GasTanks"):WaitForChild("Refill")
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args))
                    local leftRefillOnly = true
                    spearHasFired = true
                end
            end

            local spearConnection
            spearConnection = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears:GetPropertyChangedSignal("Text"):Connect(function()
                local whentofirespearrefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears.Text
                   if string.find(whentofirespearrefill, "0") then

                    checkAndRefillSpear()
                else
                    spearHasFired = false 
                end
            end)

            checkAndRefillSpear()
        end 
    end 
})

local Togglebladerefill = Tabs.Extras:CreateToggle("Blade Refill", 
{
    Title = "Auto Blade Refill", 
    Description = "Auto refill your blades",
    Default = false,
    Callback = function(state)
        if state then
            local function checkAndRefillBlade()
                local whentofirebladerefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Blades.Sets.Text
                if whentofirebladerefill == "0 / 3" and checkBladesTransparent() and not bladeHasFired then
        
                   local args = {
                        [1] = "Blades",
                        [2] = "Full_Reload",
                        [3] = "Left",
                        [4] = workspace:WaitForChild("Unclimbable"):WaitForChild("Reloads"):WaitForChild("GasTanks"):WaitForChild("Refill")
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args))
                    
                    bladeHasFired = true
                end
            end

            local bladeConnection
            bladeConnection = game:GetService("RunService").Stepped:Connect(function()
                if not bladeHasFired then
                    checkAndRefillBlade()
                end
            end)

            local textConnection
            textConnection = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Blades.Sets:GetPropertyChangedSignal("Text"):Connect(function()
                local whentofirebladerefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Blades.Sets.Text
                if whentofirebladerefill ~= "0 / 3" then
                    bladeHasFired = false 
                end
            end)

            checkAndRefillBlade()
        end 
    end 
})



local function sendPlainTextMessage(message)
    local data = {
        content = message,
        allowed_mentions = { parse = { "users" } }  
    }

    local HttpService = game:GetService("HttpService") 
    local actual = HttpService:JSONEncode(data)

    local success, response = pcall(function()
        return request({
            Url = Webhook,
            Method = "POST",
            Body = actual,
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })
    end)

    if not success then
        print("Error sending ping:", response) 
    else
        print("Ping sent successfully:", response) 
    end
end

Tabs.Misc:CreateButton({
    Title = "Teleport to lobby",
    Description = "Click to teleport",
    Callback = function()
        local placeId = 14916516914 
        local player = game.Players.LocalPlayer

        if player then
            
local args = {
	"Functions",
	"Teleport"
}
game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args))

        end
    end
})

Tabs.Misc:CreateButton({
    Title = "ForceRetry",
    Description = "wait 5 seconds",
    Callback = function()
        
local args = { "Functions", "Retry", "Add" }
                ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))

    end
})

local stopCoroutine = false

local function applyEffectToChildren(hand, particleFolder)
    for _, child in ipairs(hand:GetChildren()) do
        for _, particle in ipairs(particleFolder:GetChildren()) do
            local particleTemplate = particle:Clone()
            particleTemplate.Parent = child
        end
    end
end

local function monitorTransparency(hand, selectedAuraFolder)
    while not stopCoroutine do
        for _, child in ipairs(hand:GetChildren()) do
            if child and child.Transparency == 1 then
                for _, emitter in ipairs(child:GetChildren()) do
                    if emitter:IsA("ParticleEmitter") then
                        emitter.Enabled = false
                    end
                end
            elseif child and child.Transparency < 1 then
                if selectedAuraFolder then
                    for _, particle in ipairs(selectedAuraFolder:GetChildren()) do
                        if not child:FindFirstChild(particle.Name) then
                            local particleTemplate = particle:Clone()
                            particleTemplate.Parent = child
                        else
                            local existingParticle = child:FindFirstChild(particle.Name)
                            if existingParticle:IsA("ParticleEmitter") then
                                existingParticle.Enabled = true
                            end
                        end
                    end
                end
            end
        end
        task.wait(0.1) 
    end
end

local function removeParticles(hand)
    for _, child in ipairs(hand:GetChildren()) do
        for _, emitter in ipairs(child:GetChildren()) do
            if emitter:IsA("ParticleEmitter") then
                emitter:Destroy()
            end
        end
    end
end

local auraFolder = game:GetService("ReplicatedStorage").Assets.Auras
local auraNames = {"Default"} 
for _, aura in ipairs(auraFolder:GetChildren()) do
    table.insert(auraNames, aura.Name)
end

local AuraDropdown = Tabs.Extras:CreateDropdown("AuraDropdown", {
    Title = "Select Aura",
    Description = "Choose an aura to apply to the blades.",
    Values = auraNames,
    Multi = false,
    Default = "Default", 
})

AuraDropdown:SetValue("Default")

AuraDropdown:OnChanged(function(selectedAura)
    stopCoroutine = true
    task.wait(0.2)
    stopCoroutine = false

    local LocalPlayer = game.Players.LocalPlayer
    local characterName = LocalPlayer.Name
    removeParticles(workspace.Characters[characterName]["Rig_"..characterName].RightHand)
    removeParticles(workspace.Characters[characterName]["Rig_"..characterName].LeftHand)

    if selectedAura and selectedAura ~= "Default" then
        local selectedAuraFolder = auraFolder:FindFirstChild(selectedAura)
        if selectedAuraFolder then
            applyEffectToChildren(workspace.Characters[characterName]["Rig_"..characterName].RightHand, selectedAuraFolder)
            applyEffectToChildren(workspace.Characters[characterName]["Rig_"..characterName].LeftHand, selectedAuraFolder)
            coroutine.wrap(monitorTransparency)(workspace.Characters[characterName]["Rig_"..characterName].RightHand, selectedAuraFolder)
            coroutine.wrap(monitorTransparency)(workspace.Characters[characterName]["Rig_"..characterName].LeftHand, selectedAuraFolder)
        end
    end
end)

local ToggleTracker = Tabs.Extras:CreateToggle("Rewards Tracker", {
    Title = "Rewards Tracker",
    Description = "Turn on the Rewards Tracker",
    Default = false,
    Callback = function(Value)
        local hasSentItems = false

        local function findBattlepassTier(tbl)
            for key, value in pairs(tbl) do
                if key == "Battlepass" then
                    if type(value) == "table" then
                        for subKey, subValue in pairs(value) do
                            if subKey == "Tier" then
                                return tostring(subValue)
                            end
                        end
                    end
                end
                if type(value) == "table" then
                    local tier = findBattlepassTier(value)
                    if tier then
                        return tier
                    end
                end
            end
            return nil
        end

        while Value do
            if Webhook == "" then
                Fluent:Notify({
                    Title = "Enter a webhook to use Rewards Tracker",
                    Content = "Please Enter a webhook in the script",
                    SubContent = "Thank you",
                    Duration = 5
                })
                return
            end

            local startgui = LocalPlayer:WaitForChild("PlayerGui")
            local interface = startgui:WaitForChild("Interface")
            local stepone = interface:WaitForChild("Rewards")
            local steptwo = stepone:WaitForChild("Main")
            local stepthree = steptwo:WaitForChild("Info")
            local stepfour = stepthree:WaitForChild("Main")
            local stepfive = stepfour:WaitForChild("Items")
            local statsFolder = stepfour:WaitForChild("Stats")
            local slay = ReplicatedStorage:WaitForChild("Objectives"):WaitForChild("Slay")

            local progressValue = slay.Value
            local requirement = slay:GetAttribute("Requirement")

            if progressValue and requirement and progressValue >= requirement and not hasSentItems then
                task.wait(4)

                local missionItemsList = {}
                if stepfive then
                    for _, item in pairs(stepfive:GetChildren()) do
                        if item.Name ~= "Grid" then
                            local quantity = item:FindFirstChild("Main") 
                                and item.Main:FindFirstChild("Inner") 
                                and item.Main.Inner:FindFirstChild("Quantity") 
                                and item.Main.Inner.Quantity.Text or "unknown"
                            local itemName = item.Name:gsub("_", " ")
                            table.insert(missionItemsList, itemName .. ": " .. quantity)
                        end
                    end
                end

                local statsList = {}
                for _, stat in pairs(statsFolder:GetChildren()) do
                    if stat.Name ~= "List" then 
                        local statName = stat.Name:gsub("_", " ")
                        local statAmount = stat:FindFirstChild("Amount") and stat.Amount.Text or "unknown"
                        table.insert(statsList, statName .. ": " .. statAmount)
                    end
                end

                local specialRewards = {}
                for _, item in ipairs(missionItemsList) do
                    if string.find(item, "Serum") or string.find(item, "Secret") then
                        table.insert(specialRewards, item)
                    end
                end
                if #specialRewards == 0 then
                    table.insert(specialRewards, "No Special Rewards")
                end

                local inventoryItemsList = {}
                local currencyList = {}
                local tier, tierString

                local success, data = pcall(function()
                    return ReplicatedStorage:WaitForChild("Assets")
                        :WaitForChild("Remotes")
                        :WaitForChild("GET")
                        :InvokeServer("Data", "Copy")
                end)

                if success and data and data.Slots and data.Current_Slot then
                    local slotData = data.Slots[data.Current_Slot]
                    tier = findBattlepassTier(data)
                    tierString = tier and "Battlepass Tier: " .. tier or "Battlepass Tier: Unknown"

                    if slotData and slotData.Inventory then
                        for _, categoryItems in pairs(slotData.Inventory) do
                            for itemKey, itemValue in pairs(categoryItems) do
                                local invItemName = tostring(itemKey):gsub("_", " ")
                                if string.find(invItemName, "Serum") or string.find(invItemName, "Scroll") or string.find(invItemName, "Key") then
                                    local quantity = tostring(itemValue)
                                    table.insert(inventoryItemsList, invItemName .. ": " .. quantity)
                                end
                            end
                        end
                    else
                        table.insert(inventoryItemsList, "Inventory table is missing or unavailable")
                    end

                    if slotData and slotData.Currency then
                        for key, value in pairs(slotData.Currency) do
                            table.insert(currencyList, key .. ": " .. tostring(value))
                        end
                    else
                        table.insert(currencyList, "Currency table is missing or unavailable")
                    end
                else
                    table.insert(inventoryItemsList, "Error fetching inventory data")
                    table.insert(currencyList, "Error fetching currency data")
                end

                local combinedList = {}

                table.insert(combinedList, "**Mission Earned Items:**")
                if #missionItemsList > 0 then
                    for _, item in ipairs(missionItemsList) do
                        table.insert(combinedList, item)
                    end
                else
                    table.insert(combinedList, "No Mission Items  (BUG DO NOT WORRY)Found")
                end

                table.insert(combinedList, "\n**Inventory Items:**")
                if #inventoryItemsList > 0 then
                    for _, item in ipairs(inventoryItemsList) do
                        table.insert(combinedList, item)
                    end
                else
                    table.insert(combinedList, "No Inventory Items THAT ARE IMPORTANT Found")
                end

                table.insert(combinedList, "\n**Statistics:**")
                for _, stat in ipairs(statsList) do
                    table.insert(combinedList, stat)
                end

                table.insert(combinedList, "\n**Special Rewards:**")
                for _, specialReward in ipairs(specialRewards) do
                    table.insert(combinedList, specialReward)
                end

                table.insert(combinedList, "\n**Currencies:**")
                for _, curr in ipairs(currencyList) do
                    table.insert(combinedList, curr)
                end

                table.insert(combinedList, "\n**Player:**\n" .. "||" .. LocalPlayer.Name .. "||")
                table.insert(combinedList, "Level: " .. tostring(LocalPlayer:GetAttribute("Level") or "Unknown"))
                table.insert(combinedList, tierString)

                sendMessage("Rewards Tracker", "", combinedList)
                hasSentItems = true

                if #specialRewards > 0 and specialRewards[1] ~= "No Special Rewards" then
                    local pingMessage = "<@" .. discordID .. ">, you have received a special reward!"
                    sendPlainTextMessage(pingMessage)
                end
            end
            task.wait(0.5)
        end
    end
})

local function AimbotNape()
    while getgenv().Aimbot_Nape do
        for _, titans in pairs(game:GetService("Workspace").Titans:GetChildren()) do
            local stepone = titans:FindFirstChild("Hitboxes")
            if stepone then
                local steptwo = stepone:FindFirstChild("Hit")
                if steptwo then
                    local final = steptwo:FindFirstChild("Nape")
                    if final then
                        final.Size = Vector3.new(25, 25, 25)
                        final.Transparency = 0.85
                        final.CanCollide = false
                    end
                end
            end
        end
        task.wait(0.1)
    end
end

local Toggleforflyfarm = Tabs.Main:CreateToggle("FlyFarm", 
{
    Title = "FlyFarm", 
    Description = "Turn on the fly farm (WARNING) in beta",
    Default = false,
    Callback = function(state)
	if state then

speed = 20

local Players = game:GetService("Players")
local workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

local remotesFired = false
local blacklistedTitans = {}  

local function enableNoclipForParts(parts)
    for _, part in pairs(parts) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end

local function enableNoclipForCharacters()
    for _, character in pairs(workspace:WaitForChild("Characters"):GetChildren()) do
        enableNoclipForParts(character:GetDescendants()) 
    end
end

local function disableNoclipForParts(parts)
    for _, part in pairs(parts) do
        if part:IsA("BasePart") then
            part.CanCollide = true
        end
    end
end

local function disableNoclipForCharacters()
    for _, character in pairs(workspace:WaitForChild("Characters"):GetChildren()) do
        disableNoclipForParts(character:GetDescendants())  
    end
end

local function getClosestTitan(player, excludeTitan)
    local closestTitan = nil
    local shortestDistance = math.huge  

    for _, titan in pairs(workspace:WaitForChild("Titans"):GetChildren()) do
        if titan ~= excludeTitan and titan.Parent and not blacklistedTitans[titan] then  
            local titanPart = titan:FindFirstChild("HumanoidRootPart")
            if titanPart then
                local distance = (player.Character.HumanoidRootPart.Position - titanPart.Position).magnitude
                if distance < shortestDistance then
                    closestTitan = titan
                    shortestDistance = distance
                end
            end
        end
    end
    return closestTitan
end

local function moveToTitanAndHover(titan)
    local rootPart = character:WaitForChild("HumanoidRootPart")

    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.Parent = rootPart
    bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyPosition.D = 300  
    bodyPosition.P = 2500  

    local bodyGyro = Instance.new("BodyGyro")
    bodyGyro.Parent = rootPart
    bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
    bodyGyro.P = 1000  

    enableNoclipForCharacters()

    game:GetService("RunService").Heartbeat:Connect(function()
        local closestTitan = getClosestTitan(player, nil)
        if closestTitan then
            local targetPosition = closestTitan:WaitForChild("HumanoidRootPart").Position + Vector3.new(0, 50, 0)  
            local hoverHeight = 50
            local distanceToTarget = (rootPart.Position - targetPosition).magnitude

            if distanceToTarget > 1 then
                local direction = (targetPosition - rootPart.Position).unit
                local moveAmount = direction * speed
                bodyPosition.Position = rootPart.Position + moveAmount  
            else
                
                rootPart.AssemblyLinearVelocity = Vector3.zero
                bodyPosition.Position = targetPosition  

                if (rootPart.Position.Y - closestTitan.HumanoidRootPart.Position.Y) >= hoverHeight and not remotesFired then
                    local args1 = {"Attacks", "Slash", true}
                    ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args1))

                    local args2 = {"Hitboxes", "Register", closestTitan:WaitForChild("Hitboxes"):WaitForChild("Hit"):WaitForChild("Nape"), 129.8856658935547, 0.15462923049926758}
                    ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args2))

                    local args3 = {"Attacks", "Slash", false}
                    ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args3))

                    remotesFired = true

                    while not closestTitan:GetAttribute("Dead") do
                        task.wait(0.1)
                    end
                    
                    if closestTitan:GetAttribute("Dead") then
                        blacklistedTitans[closestTitan] = true  
                    end

                    bodyPosition:Destroy()  
                    bodyGyro:Destroy() 
                    disableNoclipForCharacters()  

                    local newTitan = getClosestTitan(player, closestTitan)
                    if newTitan then
                        moveToTitanAndHover(newTitan)
                    end

                    return  
                end
            end
        else
            bodyPosition:Destroy()  
            bodyGyro:Destroy()  
            disableNoclipForCharacters()  
            return  
        end
    end)
end

local function interactWithTitans()
    while true do
        local closestTitan = getClosestTitan(player, nil)
        if closestTitan then
            remotesFired = false
            moveToTitanAndHover(closestTitan)
        else
            break
        end
        task.wait(1)  
    end
end

interactWithTitans()

local VIP = game:GetService("VirtualInputManager")
local Slay = ReplicatedStorage.Objectives:WaitForChild("Slay")
local requirement = Slay:GetAttribute("Requirement")
while Slay.Value ~= requirement do
    task.wait(0.1)
end

task.wait(3)
VIP:SendKeyEvent(true, Enum.KeyCode.BackSlash, false, game)
task.wait(0.1)
VIP:SendKeyEvent(true, Enum.KeyCode.Right, false, game)
task.wait(0.1)
VIP:SendKeyEvent(true, Enum.KeyCode.Right, false, game)
task.wait(0.1)
VIP:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
task.wait(0.1)
VIP:SendKeyEvent(false, Enum.KeyCode.Return, false, game)


        end
    end 
})


local function napeExtender()
    while getgenv().napeExtender do
        for _, titans in pairs(game:GetService("Workspace").Titans:GetChildren()) do
            local stepone = titans:FindFirstChild("Hitboxes")
            if stepone then
                local steptwo = stepone:FindFirstChild("Hit")
                if steptwo then
                    local final = steptwo:FindFirstChild("Nape")
                    if final then
                        final.Size = Vector3.new(250, 250, 250)
                        final.Transparency = 0.85
                        final.CanCollide = false
                    end
                end
            end
        end
        task.wait(0.1)
    end
end

local TogglePerformance = Tabs.Misc:CreateToggle("Performance Mode", 
{
    Title = "Performance Mode", 
    Description = "Toggle Performance Mode",
    Default = false,
    Callback = function(state)
        if state then
		local delneeded = workspace.Climbable:GetChildren()
            game:GetService("Lighting").Atmosphere.Density = 0
            local delneeded = workspace.Climbable:GetChildren()
            for _, v in pairs(delneeded) do
                v:Destroy()
            end

            local decalsyeeted = true
            local g = game
            local w = g.Workspace
            local l = g.Lighting
            local t = w.Terrain
            
            t.WaterWaveSize = 0
            t.WaterWaveSpeed = 0
            t.WaterReflectance = 0
            t.WaterTransparency = 0
            l.GlobalShadows = false
            l.FogEnd = math.huge
            l.Brightness = 0
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level06
            
            local function disableEffects(effectClass)
                for _, effect in pairs(l:GetChildren()) do
                    if effect:IsA(effectClass) then
                        effect.Enabled = false
                    end
                end
            end
            
            disableEffects("BlurEffect")
            disableEffects("SunRaysEffect")
            disableEffects("ColorCorrectionEffect")
            disableEffects("BloomEffect")
            disableEffects("DepthOfFieldEffect")

            local descendants = g:GetDescendants()
            for _, v in pairs(descendants) do
                if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                    v.Material = Enum.Material.Plastic
                    v.Reflectance = 0
                elseif v:IsA("Decal") or (v:IsA("Texture") and decalsyeeted) then
                    v.Transparency = 1
                elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                    v.Lifetime = NumberRange.new(0)
                elseif v:IsA("Explosion") then
                    v.BlastPressure = 1
                    v.BlastRadius = 1
                elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
                    v.Enabled = false
                elseif v:IsA("MeshPart") then
                    v.Material = Enum.Material.Plastic
                    v.Reflectance = 0
                    v.TextureID = 10385902758728956
                end
            end
        end
    end
})

local player = game:GetService("Players").LocalPlayer
local function DestroyInjuries()
    local character = game:GetService("Workspace").Characters:FindFirstChild(player.Name);
    if character then
        local injuriesFolder = character:FindFirstChild("Injuries");
        if injuriesFolder then
            for _, injury in pairs(injuriesFolder:GetChildren()) do
                injury:Destroy();
            end
    end
end
end
local ToggleAntiInjury = Tabs.Main:CreateToggle("DestroyInjuries", 
{
    Title = "Anti-Injury", 
    Description = "Removes Injuries entirely",
    Default = false,
    Callback = function(togglestate)
        if togglestate then
            while togglestate do
                task.wait(0.1);
                DestroyInjuries();
            end
        end
    end
})
getgenv().napeExtender = false
getgenv().Aimbot_Nape = false
local ToggleAimbot = Tabs.Main:CreateToggle("Nape Aimbot", {
    Title = "Nape Aimbot",
    Description = "More discrete version of nape extender",
    Default = false,
    Callback = function(NapeAimbot)
        if NapeAimbot then
            getgenv().Aimbot_Nape = NapeAimbot
            spawn(AimbotNape)
        else
            getgenv().Aimbot_Nape = false
        end
    end
})
local ToggleExtender = Tabs.Main:CreateToggle("Nape Extender", {
    Title = "Nape Extender",
    Description = "Extends the nape",
    Default = false,
    Callback = function(NapeXtender)
        if NapeXtender then
            getgenv().napeExtender = NapeXtender
            spawn(napeExtender)
        else
            getgenv().napeExtender = false
        end
    end
})

local Togglebladereload = Tabs.Extras:CreateToggle("Auto Reload Blade", 
{
    Title = "Auto Reload Blade", 
    Description = "NOT AUTO REFILL",
    Default = false,
    Callback = function(togglestate)
        autor = togglestate
        getgenv().autor = togglestate

        if togglestate then
            task.spawn(function()
                while task.wait() do
                    if not getgenv().autor then return end
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local rig = character:FindFirstChild("Rig_" .. player.Name)
                    
                    if rig then
                        for i, v in pairs(rig:GetChildren()) do
                            if v.Name == "RightHand" or v.Name == "LeftHand" then
                                for i, v2 in pairs(v:GetChildren()) do
                                    if v2.Name == "Blade_1" then
                                        if v2:GetAttribute("Broken") ~= nil and v2:GetAttribute("Broken") == true then
local VIP = game:GetService("VirtualInputManager")
                                    VIP:SendKeyEvent(true, Enum.KeyCode.R, false, game)
task.wait(0.1)
                                    VIP:SendKeyEvent(false, Enum.KeyCode.R, false, game)

                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
})

SaveManager:LoadAutoloadConfig()
-- hi bestier


local VIM = game:GetService("VirtualInputManager");
getgenv().autoescape = true;
while task.wait(0.3) do
	if not getgenv().autoescape then
		return;
	end
	for _, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Interface.Buttons:GetChildren()) do
		if v then
			VIM:SendKeyEvent(true, string.sub(tostring(v), 1, 1), false, game);
			if v.AncestryChanged then
				v.AncestryChanged:Connect(function()
					if not v:IsDescendantOf(game:GetService("Players").LocalPlayer.PlayerGui.Interface.Buttons) then
						VIM:SendKeyEvent(false, string.sub(tostring(v), 1, 1), false, game);
					end
				end);
			end
		end
	end
end
end
_G.RetryDelay = RetryDelay
task.wait(RetryDelay)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local args = {
        "Functions",
        "Retry",
        "Add"
    }
    ReplicatedStorage
        :WaitForChild("Assets")
        :WaitForChild("Remotes")
        :WaitForChild("GET")
        :InvokeServer(unpack(args))
