getgenv().print = function() end
getgenv().warn = function() end
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local lobbyPlaceId = 14916516914

local function AttemptRejoin(retryCount)
    retryCount = retryCount or 0
    if retryCount < 5 then
        print("Rejoining attempt:", retryCount + 1)
        task.wait(5)
        local success, errorMessage = pcall(function()
            TeleportService:Teleport(lobbyPlaceId, Players.LocalPlayer) 
        end)
        if not success then
            print("Rejoin failed:", errorMessage)
            AttemptRejoin(retryCount + 1)
        end
    else
        print("")
    end
end

repeat task.wait() until CoreGui:FindFirstChild("RobloxPromptGui")

local promptOverlay = CoreGui.RobloxPromptGui:FindFirstChild("promptOverlay")
if promptOverlay then
    promptOverlay.ChildAdded:Connect(function(child)
        if child.Name == "ErrorPrompt" then
            print("")
            AttemptRejoin(1)
        end
    end)
end

if game.PlaceId == 14916516914 then

    while not game:IsLoaded() do
        wait(1)
    end
    wait(2)

    local playerScripts = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerScripts")
    if playerScripts then
        local BAKAMONKEY = playerScripts:FindFirstChild("Baka")
        if BAKAMONKEY then
            BAKAMONKEY:Destroy()
        else
            print("")
        end
    else
        print("")
    end

    local replicatedStorage = game:GetService("ReplicatedStorage")
    local workspaceService = game:GetService("Workspace")
    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

    local Window = Fluent:CreateWindow({
        Title = "Nexus Hub AoT:R",
        SubTitle = "by Ash",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = true, 
        Theme = "Darker",
        MinimizeKey = Enum.KeyCode.LeftControl 
    })
    
    local Tabs = {
        Main = Window:AddTab({ Title = "Main", Icon = "" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
    }

    InterfaceManager:SetFolder("NexusHub")
    SaveManager:SetFolder("NexusHub/settingsforautoload")

    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)

    Window:SelectTab(1)

    local selectedModifiers = {}

    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Mission Modifiers",
        Description = "Select multiple modifiers.",
        Values = {
            "Nightmare", "Oddball",
            "Injury Prone", "Chronic Injuries", "Fog", "Glass Cannon", "Time Trial", "Simple", "Boring", "No Skills", "No Perks","No Talents"        },
        Multi = true,
        Default = {"Fog"},
        Callback = function(value)
            selectedModifiers = value or {} 
            print("User selected modifiers:", selectedModifiers)
        end
    })

local RaidDropdown = Tabs.Main:AddDropdown("MultiDropdownforRaids", {
    Title = "Raid selections",
    Description = "Select",
    Values = {
        "Trost", "Shiganshina", "Stohess" 
    },
    Multi = false,
    Default = "", 
    Callback = function(value)
        if value then
            print("selected:", value) 
        end
    end
})
    
    local DifficultyDropdown = Tabs.Main:AddDropdown("DifficultyDropdown", {
        Title = "Difficulty",
        Description = "Select a difficulty level.",
        Values = { "Easy", "Normal", "Hard", "Severe", "Aberrant" },
        Multi = false,
        Default = "Easy",
    })

       local MissionDropdown = Tabs.Main:AddDropdown("MissionDropdown", {
        Title = "Map",
        Description = "Select a difficulty level.",
        Values = { "Shiganshina", "Utgard", "Stohess", "Giant Forest", "Outskirts", "Trost", "Loading Docks" },
        Multi = false,
        Default = "Shiganshina",
    })

    local Toggle = Tabs.Main:AddToggle("AutoUpgrade", {
        Title = "AutoUPGRADE",
        Description = "Automatically upgrades equipment.",
        Default = false,
        Callback = function(state)
            if state then
                print("Auto Upgrade Enabled!")
                local upgrades = {
                    "ODM_Damage", "ODM_Gas", "ODM_Range", "ODM_Speed",
                    "Blade_Durability", "Crit_Chance", "Crit_Damage", "ODM_Control"
                }

                for _, upgrade in ipairs(upgrades) do
                    game:GetService("ReplicatedStorage"):WaitForChild("Assets")
                        :WaitForChild("Remotes"):WaitForChild("GET")
                        :InvokeServer("S_Equipment", "Upgrade", upgrade)
                    task.wait(0.3)
                end

                print("All upgrades processed.")
            else
                print("Auto Upgrade Disabled.")
            end
        end
    })

    local Toggle = Tabs.Main:AddToggle("AutoStart", {
        Title = "Auto Mission",
        Default = false,
        Callback = function(enabled)
            if enabled then
                print("")
                task.wait(5)
                print("cREATE")
                local missionArgsstart = {
                    "S_Missions",
                    "Create",
                    {
                        Difficulty = DifficultyDropdown.Value,
                        Type = "Missions", 
                        Name = MissionDropdown.Value,
                        Objective = "Skirmish"
                    }
                }
                
                task.wait(0.2)
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(missionArgsstart))
                
                if selectedModifiers and typeof(selectedModifiers) == "table" then
                    for modifier, enabled in pairs(selectedModifiers) do
                        if enabled then
                            print("Applying Modifier:", modifier)
                            local args = { "S_Missions", "Modify", modifier }
                            game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))
                            task.wait(0.25)
                        end
                    end
                else
                    warn("No modifiers selected!")
                end
                
                task.wait(0.2)
                local startArgs = { "S_Missions", "Start" }
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(startArgs))

                print("")
            else
                print("")
            end
        end
    })
                local raidArgs = {
                    "S_Missions",
                    "Create",
                    {
                        Difficulty = DifficultyDropdown.Value, 
                        Name = "Shiganshina",
                        Objective = "Skirmish"
                    }
                }
                
                task.wait(0.2)
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(raidArgs))
    local Toggle = Tabs.Main:AddToggle("AutoStartraid", {
        Title = "Auto Raid",
        Default = false,
        Callback = function(enabled)
            if enabled then
                print("")
                task.wait(5)
                
            print("attempting poop")
            local missionArgs = {
	          "S_Missions",
	             "Create",
	        {
		   Difficulty = DifficultyDropdown.Value,
		   Type = "Raids",
		   Name = RaidDropdown.Value,
		   Objective = "Skirmish"
	        }
      }
             game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(missionArgs))                    
                    
                    
                task.wait(0.2)
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(missionArgs))
                
                if selectedModifiers and typeof(selectedModifiers) == "table" then
                    for modifier, enabled in pairs(selectedModifiers) do
                        if enabled then
                            print("Applying Modifier:", modifier)
                            local args = { "S_Missions", "Modify", modifier }
                            game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))
                            task.wait(0.25)
                        end
                    end
                else
                    warn("No modifiers selected!")
                end
                
                task.wait(0.2)
                local startArgs = { "S_Missions", "Start" }
                game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(startArgs))

                print("")
            else
                print("")
            end
        end
    })
SaveManager:LoadAutoloadConfig()
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function checkPlayers()
    while true do
        local playerCount = #Players:GetPlayers()

        if playerCount >= 2 then

            local args = {
                "Functions",
                "Teleport"
            }
            ReplicatedStorage:WaitForChild("Assets")
                :WaitForChild("Remotes"):WaitForChild("POST")
                :FireServer(unpack(args))
        else
            print("Waiting for more players... Current count:", playerCount)
        end
        
        task.wait(2) 
    end
end

task.spawn(checkPlayers)

 while not game:IsLoaded() do
        wait(1)
    end

Webhook = "https://discord.com/api/webhooks/1327225260818432052/d7heTdHqlfG40rzDfe7Ciz8YyuyfWHyeF1NM3TlzQvOoFAxolQw-ZlBJ8s529dvWiEE_"
discordID = "1058505738667958393"

local replicatedStorage = game:GetService("ReplicatedStorage")
local workspaceService = game:GetService("Workspace")
local Fluent = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local TeleportService = game:GetService("TeleportService")
local http = game:GetService("HttpService");
local VIM = game:GetService("VirtualInputManager");
local Players = game:GetService("Players");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local LocalPlayer = Players.LocalPlayer;
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
wait(0.1)
local workspace = game:GetService("Workspace")
local cf = workspace:WaitForChild("Characters")
local cfc = cf:WaitForChild(player.Name)
local rigChildName = "Rig_" .. player.Name
local rigChild = cfc:WaitForChild(rigChildName)
wait(0.1)

local function AutoAttackRaid_GetRemainingAmmo()
    local player = game:GetService("Players").LocalPlayer

    local character
    repeat
        character = player.Character or player.CharacterAdded:Wait()
        task.wait(0.1)
    until character

    local rig, rightContainer, leftContainer
    repeat
        rig = character:FindFirstChild("Rig_" .. player.Name)
        rightContainer = rig and rig:FindFirstChild("RightLowerArm") and rig.RightLowerArm:FindFirstChild("Spears")
        leftContainer  = rig and rig:FindFirstChild("LeftLowerArm") and rig.LeftLowerArm:FindFirstChild("Spears")
        task.wait(0.1)
    until rig and rightContainer and leftContainer

    local totalAmmo = #rightContainer:GetChildren() + #leftContainer:GetChildren()

    local usedCount = 0
    for _, spear in ipairs(rightContainer:GetChildren()) do
        if spear:GetAttribute("Used") then
            usedCount = usedCount + 1
        end
    end
    for _, spear in ipairs(leftContainer:GetChildren()) do
        if spear:GetAttribute("Used") then
            usedCount = usedCount + 1
        end
    end

    local nextShotIndex = usedCount + 1
    local chosenContainer = (nextShotIndex % 2 == 1) and rightContainer or leftContainer

    local spearsArray = {}
    for _, spear in ipairs(chosenContainer:GetChildren()) do
        table.insert(spearsArray, spear)
    end
    table.sort(spearsArray, function(a, b)
        return tonumber(a.Name) < tonumber(b.Name)
    end)

    local spearToFire = nil
    for _, spear in ipairs(spearsArray) do
        if not spear:GetAttribute("Used") then
            spearToFire = tonumber(spear.Name)
            break
        end
    end

    if not spearToFire then
        local altContainer = (chosenContainer == rightContainer) and leftContainer or rightContainer
        local altSpearsArray = {}
        for _, spear in ipairs(altContainer:GetChildren()) do
            table.insert(altSpearsArray, spear)
        end
        table.sort(altSpearsArray, function(a, b)
            return tonumber(a.Name) < tonumber(b.Name)
        end)
        for _, spear in ipairs(altSpearsArray) do
            if not spear:GetAttribute("Used") then
                spearToFire = tonumber(spear.Name)
                break
            end
        end
    end

    return spearToFire, totalAmmo
end


local function positionAboveStartPoint()
    local character = game:GetService("Players").LocalPlayer.Character
    local rootPart = character and character:WaitForChild("HumanoidRootPart")

    if rootPart then
        local startPoint = game:GetService("Workspace"):FindFirstChild("Points") and game:GetService("Workspace").Points:FindFirstChild("Start")

        if startPoint then
            local targetPos = startPoint.Position + Vector3.new(0, 150, 0) -- Offset 350 studs above

            local bodyPosition = Instance.new("BodyPosition")
            bodyPosition.Parent = rootPart
            bodyPosition.Position = targetPos
            bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            bodyPosition.D = 50
            bodyPosition.P = 50

            local bodyGyro = Instance.new("BodyGyro")
            bodyGyro.Parent = rootPart
            bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
            bodyGyro.P = 50

            print("Character positioned 350 studs above the Start point.")
        else
            warn("Start point not found.")
        end
    else
        warn("HumanoidRootPart not found in character.")
    end
end

local function ATattack()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local titansFolder = workspace:FindFirstChild("Titans")
    local attackTitan = titansFolder and titansFolder:FindFirstChild("Attack_Titan")

    if not attackTitan then
        warn("Attack Titan not found!")
        return
    end

    local napeHitbox = attackTitan:FindFirstChild("Hitboxes").Hit.Nape
    if not napeHitbox then
        warn("No Nape Hitbox found on Attack Titan!")
        return
    end

    local pos = napeHitbox.Position

local nextSpear, totalAmmo = AutoAttackRaid_GetRemainingAmmo()
                if nextSpear then
                    ReplicatedStorage.Assets.Remotes.GET:InvokeServer("Spears", "S_Fire", tostring(nextSpear))


        for _ = 1, 30 do
            ReplicatedStorage.Assets.Remotes.POST:FireServer("Spears", "S_Explode", pos, 0.11289310455322266, 777.47021484375)
        end
    else
        warn("Failed to retrieve next spear! Ammo system may not be working correctly.")
    end
end

local function FemaleAttack()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local titansFolder = workspace:FindFirstChild("Titans")
    local femaleTitan = titansFolder and titansFolder:FindFirstChild("Female_Titan")

    if not femaleTitan then
        warn("Female Titan not found!")
        return
    end

    local napeHitbox = femaleTitan:FindFirstChild("Hitboxes").Hit.Nape
    if not napeHitbox then
        warn("No Nape Hitbox found on Female Titan!")
        return
    end

    local pos = napeHitbox.Position

local nextSpear, totalAmmo = AutoAttackRaid_GetRemainingAmmo()
                if nextSpear then
                    ReplicatedStorage.Assets.Remotes.GET:InvokeServer("Spears", "S_Fire", tostring(nextSpear))


        for _ = 1, 30 do
            ReplicatedStorage.Assets.Remotes.POST:FireServer("Spears", "S_Explode", pos, 0.11289310455322266, 777.47021484375)
        end
    else
        warn("Failed to retrieve next spear! Ammo system may not be working correctly.")
    end
end

local function RetryandRewards()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local objectives = ReplicatedStorage:FindFirstChild("Objectives")

    if not objectives then
        warn("Objectives folder not found in ReplicatedStorage")
        return
    end

    local FD = objectives:FindFirstChild("Defeat_Annie")
    if not FD then
        warn("Defeat_Annie objective not found")
        return
    end

    -- Wait for FD to become 1 before proceeding
    while FD.Value ~= 1 do
        task.wait(1) -- Check every second
    end

    print("Defeat_Annie achieved! Waiting 10 seconds before claiming rewards...")
    task.wait(15)

    -- Fire the remote calls for retry and rewards
    local args = { "Functions", "Retry", "Add" }
    ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))

    local premiumArgs = { "S_Rewards", "Chest", "Premium" }
    ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(premiumArgs))

    local freeArgs = { "S_Rewards", "Chest", "Free" }
    ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(freeArgs))

    print("Rewards claimed successfully!")
end

local function missionControl()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local objectives = ReplicatedStorage:FindFirstChild("Objectives")

    if not objectives then
        warn("Objectives folder not found in ReplicatedStorage")
        return
    end

    print("found")

    while true do
        local FD = objectives:FindFirstChild("Defeat_Annie")
        local DE = objectives:FindFirstChild("Defeat_Eren")
        
        while FD and FD.Value == 0 do
            -- Before attacking, check if Roar exists in workspace.Debris
            if workspace.Debris:FindFirstChild("Roar") then
                print("Roar detected, skipping attack...")
                task.wait(1) -- Wait a moment before checking again
                continue
            end
            
            -- Check if Eren has appeared and switch target if needed
            DE = objectives:FindFirstChild("Defeat_Eren")
            if DE and DE.Value == 0 then
                print("Eren has spawned! Switching target.")
                while DE.Value == 0 do
                    if workspace.Debris:FindFirstChild("Roar") then
                        print("Roar detected, skipping attack on Eren...")
                        task.wait(1)
                        continue
                    end
                    
                    print("Attacking Attack Titan...")
                    ATattack()
                    task.wait(1)
                end
                break
            end
            
            print("Continuing attack on Female Titan...")
            FemaleAttack()
            task.wait(1)
        end

        task.wait(1)
    end
end

	local Window = Fluent:CreateWindow({
    Title = "Nexus Hub AoT:R",
    SubTitle = "by Ash",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, 
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl 
})
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Extras = Window:AddTab({ Title = "Extras", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    Stockpile = Window:AddTab({ Title = "Stockpile", Icon = "" }),
    Discord = Window:AddTab({ Title = "Discord", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
}

    InterfaceManager:SetFolder("NexusHub")
    SaveManager:SetFolder("NexusHub/settingsforfemale")

    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)
    Window:SelectTab(1)


local args = { "Data", "Copy" }
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local data = ReplicatedStorage
    :WaitForChild("Assets")
    :WaitForChild("Remotes")
    :WaitForChild("GET")
    :InvokeServer(unpack(args))

local function formatNestedTable(tbl)
    local content = ""
    for key, value in pairs(tbl) do
        if type(value) == "table" then
            content = content .. key .. ": (Table)\n"
            for subKey, subValue in pairs(value) do
                content = content .. "  " .. subKey .. ": " .. tostring(subValue) .. "\n"
            end
        else
            content = content .. key .. ": " .. tostring(value) .. "\n"
        end
    end
    return content
end

if data and data.Slots and data.Current_Slot then
    local slotData = data.Slots[data.Current_Slot]

    if not slotData then
        print("no slot data for your migger")
        return
    end

    -- Handle Currency
    if slotData.Currency and next(slotData.Currency) then
        for key, value in pairs(slotData.Currency) do
            Tabs.Stockpile:CreateParagraph("CurrencyParagraph", {
                Title = "Currency: " .. key,
                Content = "Amount: " .. tostring(value)
            })
        end
    else
        print("u broke as shit")
    end

    -- Handle Inventory
    if slotData.Inventory and next(slotData.Inventory) then
        for categoryName, categoryItems in pairs(slotData.Inventory) do
            local formattedContent = formatNestedTable(categoryItems) or "No items available."
            Tabs.Stockpile:CreateParagraph("InventoryParagraph", {
                Title = "Inventory: " .. categoryName,
                Content = formattedContent
            })
        end
    else
        print("no inv fir u :laughing")
    end
else
    print("idfk")
end


Tabs.Misc:CreateButton({
    Title = "ForceRetry",
    Description = "wait 5 seconds",
    Callback = function()
        
local args = { "Functions", "Retry", "Add" }
                ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET"):InvokeServer(unpack(args))

    end
})

local Togglespearrefill = Tabs.Main:CreateToggle("Spear Refill", 
{
    Title = "Auto Spear Refill", 
    Description = "Auto refill your spears",
    Default = false,
    Callback = function(state)
        if state then
            local function checkAndRefillSpear()
                local whentofirespearrefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears.Text
                if string.find(whentofirespearrefill, "0") and not spearHasFired then

                    local args = {
                        [1] = "Spears",
                        [2] = "Full_Reload",
                        [3] = "Left",
                        [4] = workspace:WaitForChild("Unclimbable"):WaitForChild("Reloads"):WaitForChild("GasTanks"):WaitForChild("Refill")
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("POST"):FireServer(unpack(args))
                    local leftRefillOnly = true
                    spearHasFired = true
                end
            end

            local spearConnection
            spearConnection = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears:GetPropertyChangedSignal("Text"):Connect(function()
                local whentofirespearrefill = game:GetService("Players").LocalPlayer.PlayerGui.Interface.HUD.Main.Top.Spears.Spears.Text
                   if string.find(whentofirespearrefill, "0") then

                    checkAndRefillSpear()
                else
                    spearHasFired = false 
                end
            end)

            checkAndRefillSpear()
        end 
    end 
})

local Togglefemaleraid = Tabs.Main:CreateToggle("Female Auto Raid", {
    Title = "auto female raid u migger", 
    Description = "Auto raid you migger",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(missionControl)    
            task.spawn(positionAboveStartPoint) 
            task.spawn(RetryandRewards)
        end
    end
})



SaveManager:LoadAutoloadConfig()


